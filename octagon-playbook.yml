# Test Command: ansible-playbook --user=vagrant --ask-pass --inventory-file=octagon-hosts.yml octagon-playbook.yml

- hosts: all
  become: true
  vars:
    files_dir: files/
    vars_dir: vars/
    apache_files_dir: '{{ files_dir }}apache/'
    https_files_dir: '{{ files_dir }}https/'
    lab_files_dir: '{{ files_dir }}labs/'
    ldap_files_dir: '{{ files_dir }}ldap/'
    mariadb_files_dir: '{{ files_dir }}mariadb/'
  vars_files: 
    - '{{ vars_dir }}/kali-variables.yml'
    - '{{ vars_dir }}/apache-variables.yml'
    - '{{ vars_dir }}/https-variables.yml'
    - '{{ vars_dir }}/mutillidae-variables.yml'
    - '{{ vars_dir }}/mariadb-variables.yml'
    - '{{ vars_dir }}/openldap-variables.yml'
  environment:
    ansible_python_interpreter: '/usr/bin/python3'

  tasks:
  - name: Change Linux root password to mutillidae
    user: 
      name: root
      update_password: always
      password: '{{ linux_password }}'

  - name: Add mutillidae.local domain to /etc/hosts
    lineinfile:
      path: /etc/hosts
      regexp: '^127.0.0.1'
      line: '127.0.0.1	{{ website_domain_name }} {{ website_domain_aliases }}'

  # Configure OpenLDAP
  - name: Debconf
    debconf:
      name: 'slapd'
      question: '{{ item.question }}'
      value: '{{ item.value }}'
      vtype: '{{ item.vtype }}'
    with_items: '{{ openldap_debconfs }}'
  - name: Update APT cache
    apt: 
      update_cache: yes

  - name: Install prerequisites for ansible to use
    apt: 
      name: '{{ prerequisite_software_packages }}'
      state: latest
      force_apt_get: yes
 
  - name: Install LAMP software packages
    apt:
      name: '{{ lamp_software_packages }}'
      state: latest

  - name: Install OpenLDAP software packages
    apt:
      name: '{{ openldap_packages }}'
      state: latest

  - name: Remove JavaScript-Common package
    apt:
      name: javascript-common
      state: absent

  - name: Remove unneeded packages from the cache
    apt:
      autoclean: yes

  - name: Remove dependencies that are no longer required
    apt:
      autoremove: yes

  #Install Mutillidae
  - name: Clone Mutillidae from GitHub
    git:
      repo: '{{ mutillidae_git_repo }}'
      dest: '{{ www_path }}{{ website_name }}'
      update: yes
      force: yes

  #Apache Configuration
  - name: Copy SSL certificate and private key
    copy:
      src:    '{{ item.src }}'
      dest:   '{{ item.dest }}'
      owner:  root
      group:  root
      mode:   '{{ item.mode }}'
    with_items:
      - src:  '{{ https_files_dir }}{{ ssl_certificate }}'
        dest: '{{ ssl_certs_dir }}{{ ssl_certificate }}'
        mode: '0644'
      - src:  '{{ https_files_dir }}{{ ssl_private_key }}'
        dest: '{{ ssl_private_key_dir }}{{ ssl_private_key }}'
        mode: '0600'

  - name: Enable ssl module
    apache2_module:
      state: present
      name: ssl
    notify: Restart Apache

  - name: Set up Apache aliases configuration
    copy:
      src: '{{ apache_files_dir }}{{ conf_available_dir }}{{ apache_aliases_conf }}'
      dest: '{{ apache_conf_available_dir }}{{ apache_aliases_conf }}'

  - name: Enable Apache aliases configuration
    command: '{{ a2enconf }} aliases'

  - name: Set up default virtualhost on Apache
    copy:
      src: '{{ apache_files_dir }}{{ sites_available_dir }}{{ default_site_conf }}'
      dest: '{{ apache_sites_available_dir }}{{ default_site_conf }}'
    notify: Reload Apache

  - name: Set up Mutillidae virtualhost on Apache
    template:
      src: '{{ apache_files_dir }}{{ sites_available_dir }}{{ mutillidae_site_conf }}.j2'
      dest: '{{ apache_sites_available_dir }}{{ mutillidae_site_conf }}'
    notify: Reload Apache

  - name: Set up Apache error-pages configuration in Apache conf directory
    copy:
      src: '{{ apache_files_dir }}{{ apache_error_pages_conf }}'
      dest: '{{ apache_conf_dir }}{{ apache_error_pages_conf }}'

  - name: Set up Apache error pages directory to hold error pages files 
    file: path={{ apache_error_pages_dir }} state=directory

  - name: Set up Apache error pages in Apache error pages directory
    copy:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
      owner:  www-data
      group:  www-data
      mode: 0644
    with_items:
      - src: '{{ apache_files_dir }}error-pages/oops.jpg'
        dest: '{{ apache_error_pages_dir }}oops.jpg'
      - src: '{{ apache_files_dir }}error-pages/404.html'
        dest: '{{ apache_error_pages_dir }}404.html'

  - name: Enable Mutillidae site
    command: '{{ a2ensite }} {{ mutillidae_site_conf }}'
    notify: Reload Apache

  - name: Start Apache 2 web service, if not started
    service:
      name: apache2
      state: started
      enabled: yes

  # MySQL Configuration
  - name: Start MariaDB, if not started
    service: 
      name: mysql
      state: started
      enabled: yes

  - name: Create /root/.my.cnf with root password credentials
    template:
      src:  '{{ mariadb_files_dir }}my.cnf.j2'
      dest: '/root/.my.cnf'
      owner: root
      mode: 0600
    notify: Restart MariaDB

  - name: Grant privileges to MariaDB root account
    mysql_user:
      login_unix_socket: '/var/run/mysqld/mysqld.sock'
      user: root
      password: '{{ mariadb_root_password }}'
      host_all: yes
      priv: '*.*:ALL,GRANT'
      check_implicit_admin: true
    no_log: true

  # Build Mutillidae MySQL database
  - name: Visit Mutillidae database "Set-Up" page that builds the database
    uri:
      url: http://mutillidae.local/set-up-database.php
      return_content: yes
    register: this
    failed_when: "'The database server appears to be offline' in this.content"

  # Import Mutillidae LDAP database
  - name: Start OpenLDAP, if not started
    service: 
      name: slapd
      state: started
      enabled: yes

  - name: Copy Mutillidae LDIF file to Temp directory
    template:
      src:  '{{ ldap_files_dir }}mutillidae.ldif'
      dest: '/tmp'

  - name: Upload the Mutillidae LDIF file into the LDAP database
    command: 'ldapadd -x -D "cn=admin,dc=mutillidae,dc=local" -w mutillidae -H ldap:// -c -f /tmp/mutillidae.ldif'
    ignore_errors: yes

  # Copy over the lab files
  - name: Copy the lab files into the Documents folder
    copy:
      src: '{{ lab_files_dir }}'
      dest: '/root/Documents'
      mode: '0755'

  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

    - name: Restart Apache
      service:
        name: apache2
        state: restarted

    - name: Restart MariaDB
      service:
        name: mysql
        state: restarted

